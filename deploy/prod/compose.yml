x-traefik-labels-front: &labels_front
  traefik.enable: "true"
  traefik.http.routers.front.rule: Host(`${FRONT_HOST}`)
  traefik.http.routers.front.entrypoints: websecure
  traefik.http.routers.front.tls: "true"
  traefik.http.routers.front.tls.certresolver: le          
  traefik.http.services.front.loadbalancer.server.port: "3000"
  traefik.http.routers.front.middlewares: secure-headers@docker,compress@docker

x-traefik-labels-api: &labels_api
  traefik.enable: "true"
  traefik.http.routers.api.rule: Host(`${API_HOST}`)
  traefik.http.routers.api.entrypoints: websecure
  traefik.http.routers.api.tls: "true"
  traefik.http.routers.api.tls.certresolver: le
  traefik.http.services.api.loadbalancer.server.port: "8080"
  # add CORS here (keeps your secure headers + rate limit)
  traefik.http.routers.api.middlewares: secure-headers@docker,rl@docker,api-cors@docker

  traefik.http.routers.api-sse.rule: Host(`${API_HOST}`) && PathPrefix(`/api/simulation/progress`)
  traefik.http.routers.api-sse.entrypoints: websecure
  traefik.http.routers.api-sse.tls: "true"
  traefik.http.routers.api-sse.priority: "20"
  traefik.http.routers.api-sse.service: api
  # keep SSE headers and add CORS here too
  traefik.http.routers.api-sse.middlewares: secure-headers@docker,sse-headers@docker,api-cors@docker
  traefik.http.routers.api-sse.tls.certresolver: le



services:
  traefik:
    image: traefik:v3.1
    command:
      - --accesslog=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.transport.respondingTimeouts.readTimeout=0
      - --entrypoints.websecure.transport.respondingTimeouts.writeTimeout=0
      - --entrypoints.websecure.transport.respondingTimeouts.idleTimeout=0
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${LE_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --api.dashboard=false
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addRoutersLabels=true
      - --metrics.prometheus.addServicesLabels=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    labels:
      traefik.enable: "true"  # ← enable Traefik's own labels so middlewares exist
      traefik.http.routers.http-catchall.rule: HostRegexp(`{any:.+}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.middlewares: redirect-https
      traefik.http.middlewares.redirect-https.redirectscheme.scheme: https
      # security headers (deduped referrerPolicy)
      traefik.http.middlewares.secure-headers.headers.stsSeconds: "31536000"
      traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains: "true"
      traefik.http.middlewares.secure-headers.headers.stsPreload: "true"
      traefik.http.middlewares.secure-headers.headers.frameDeny: "true"
      traefik.http.middlewares.secure-headers.headers.contentTypeNosniff: "true"
      traefik.http.middlewares.secure-headers.headers.browserXssFilter: "true"
      traefik.http.middlewares.secure-headers.headers.referrerPolicy: strict-origin-when-cross-origin
      traefik.http.middlewares.secure-headers.headers.permissionsPolicy: "geolocation=(), microphone=(), camera=()"
      traefik.http.middlewares.api-cors.headers.accessControlAllowOriginList: https://${FRONT_HOST}
      traefik.http.middlewares.api-cors.headers.accessControlAllowMethods: "GET,POST,PUT,DELETE,OPTIONS,PATCH"
      traefik.http.middlewares.api-cors.headers.accessControlAllowHeaders: "*"
      traefik.http.middlewares.api-cors.headers.accessControlExposeHeaders: "Content-Disposition"
      traefik.http.middlewares.api-cors.headers.accessControlAllowCredentials: "false"
      traefik.http.middlewares.api-cors.headers.addVaryHeader: "true"
      # gzip/deflate
      traefik.http.middlewares.compress.compress: "true"
      # simple rate limit for API
      traefik.http.middlewares.rl.ratelimit.average: "50"
      traefik.http.middlewares.rl.ratelimit.burst: "100"
      traefik.http.middlewares.rl.ratelimit.period: 1s
      # keep Watchtower off Traefik
      com.centurylinklabs.watchtower.enable: "false"
      traefik.http.middlewares.sse-headers.headers.customResponseHeaders.Cache-Control: no-cache
      traefik.http.middlewares.sse-headers.headers.customResponseHeaders.X-Accel-Buffering: "no"
    restart: unless-stopped

  frontend:
    image: gorm2303/firecasting-frontend:latest
    labels:
      <<: *labels_front
      com.centurylinklabs.watchtower.enable: "true"
    restart: unless-stopped
    depends_on: [api]

  api:
    image: gorm2303/firecasting-api:latest
    environment:
      SPRING_PROFILES_ACTIVE: prod
      # CORS (Spring MVC) — recommended in prod
      SPRING_WEB_CORS_ALLOWED_ORIGINS: https://${FRONT_HOST}
      SPRING_MVC_CORS_MAPPINGS_[/**]_ALLOWED-ORIGINS: https://${FRONT_HOST}
      SPRING_MVC_CORS_MAPPINGS_[/**]_ALLOWED-METHODS: GET,POST,PUT,DELETE,OPTIONS,PATCH
      SPRING_MVC_CORS_MAPPINGS_[/**]_ALLOWED-HEADERS: "*"
      SPRING_MVC_CORS_MAPPINGS_[/**]_EXPOSED-HEADERS: Content-Disposition
      SPRING_MVC_CORS_MAPPINGS_[/**]_ALLOW-CREDENTIALS: "false"
      SPRING_MVC_CORS_MAPPINGS_[/**]_MAX-AGE: "3600"
      # Postgres wiring
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/appdb
      SPRING_DATASOURCE_USERNAME: appuser
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-change-me}
      # Schema management
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_FLYWAY_ENABLED: "true"
      # If you ever point at a non-empty DB without Flyway history, uncomment:
      # SPRING_FLYWAY_BASELINE-ON-MIGRATE: "true"
    depends_on:
      db:
        condition: service_healthy
    labels:
      <<: *labels_api
      com.centurylinklabs.watchtower.enable: "true"
    restart: unless-stopped

  db:
    image: postgres:16
    container_name: fire_db
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change-me}
      # optional, but helps consistent timestamps/logs
      TZ: Europe/Copenhagen
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    # no ports: we keep Postgres internal-only

  watchtower:
    image: containrrr/watchtower
    # every 5 minutes; only update labeled containers; clean old images
    command: --schedule "0 */5 * * * *" --label-enable --cleanup
    environment:
      - TZ=Europe/Copenhagen
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped



  # --- monitoring (only runs when profile enabled) ---
  prometheus:
    profiles: ["monitoring"]
    image: prom/prometheus:v2.54.1
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=7d
      - --storage.tsdb.path=/prom
    volumes:
      - prom_data:/prom
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped

  loki:
    profiles: ["monitoring"]
    image: grafana/loki:2.9.0
    command:
      - -config.file=/etc/loki/config.yml
      - -config.expand-env=true
    environment:
      - LOKI_RETENTION_DAYS=${LOKI_RETENTION_DAYS}
    volumes:
      - loki_data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/config.yml:ro
    restart: unless-stopped

  promtail:
    profiles: ["monitoring"]
    image: grafana/promtail:2.9.0
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    restart: unless-stopped

  cadvisor:
    profiles: ["monitoring"]
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    command:
      - --docker_only
      - --housekeeping_interval=30s
      - --store_container_labels=true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

  nodeexporter:
    profiles: ["monitoring"]
    image: quay.io/prometheus/node-exporter:v1.8.1
    command:
      - --path.rootfs=/rootfs
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.mount-points-exclude=^/(rootfs/)?(dev|proc|sys|run|var/lib/docker/.+|var/lib/containers/.+|snap/.+|tmp)(/|$)
      - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|nsfs|overlay|proc|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
    volumes:
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    read_only: true
    restart: unless-stopped

  grafana:
    profiles: ["monitoring"]
    image: grafana/grafana-oss:10.4.0
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://${GRAFANA_HOST}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.rule: Host(`${GRAFANA_HOST}`)
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.tls: "true"
      traefik.http.routers.grafana.tls.certresolver: le 
      traefik.http.services.grafana.loadbalancer.server.port: "3000"
    restart: unless-stopped

volumes:
  prom_data:
  loki_data:
  grafana_data:
  traefik_letsencrypt:
  db_data:
