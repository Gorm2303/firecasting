x-front: &lbl_front
  traefik.enable: "true"
  traefik.http.routers.front.rule: Host(`${FRONT_HOST}`)
  traefik.http.routers.front.entrypoints: websecure
  traefik.http.routers.front.tls: "true"
  traefik.http.services.front.loadbalancer.server.port: "3000"

x-api: &lbl_api
  traefik.enable: "true"
  traefik.http.routers.api.rule: Host(`${API_HOST}`)
  traefik.http.routers.api.entrypoints: websecure
  traefik.http.routers.api.tls: "true"
  traefik.http.services.api.loadbalancer.server.port: "8080"

services:
  traefik:
    image: traefik:v3.1
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addRoutersLabels=true
      - --metrics.prometheus.addServicesLabels=true
      - --api.dashboard=false
    ports: ["80:80","443:443"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik/dynamic:ro
    labels:
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{any:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-https
      - traefik.http.middlewares.redirect-https.redirectscheme.scheme=https
    restart: unless-stopped

  db:
    image: postgres:16
    container_name: fire_db
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpass}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  api:
    build:
      context: ../../../firecasting-backend
    environment:
      SPRING_PROFILES_ACTIVE: dev
      # ✅ CORS (Spring MVC)
      SPRING_MVC_CORS_MAPPINGS_[/**]_ALLOWED-ORIGINS: https://${FRONT_HOST}
      SPRING_MVC_CORS_MAPPINGS_[/**]_ALLOWED-METHODS: GET,POST,PUT,DELETE,OPTIONS,PATCH
      SPRING_MVC_CORS_MAPPINGS_[/**]_ALLOWED-HEADERS: "*"
      SPRING_MVC_CORS_MAPPINGS_[/**]_EXPOSED-HEADERS: Content-Disposition
      SPRING_MVC_CORS_MAPPINGS_[/**]_ALLOW-CREDENTIALS: "false"
      SPRING_MVC_CORS_MAPPINGS_[/**]_MAX-AGE: "3600"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: "true"
      MANAGEMENT_METRICS_TAGS_APPLICATION: firecasting-api

      # --- Postgres wiring for storage ---
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/appdb
      SPRING_DATASOURCE_USERNAME: appuser
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-devpass}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      # If you use Flyway for schema:
      SPRING_FLYWAY_ENABLED: "true"
    labels: *lbl_api
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q UP || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  frontend:
    build:
      context: ../../../firecasting-frontend/vite-react-frontend
      args:
        VITE_API_BASE_URL: https://${API_HOST}/api/simulation
    labels: *lbl_front
    depends_on:
      api:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/ >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 10
    restart: unless-stopped

volumes:
  db-data:
