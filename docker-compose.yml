x-traefik-labels-front: &labels_front
  traefik.enable: "true"
  traefik.http.routers.front.rule: Host(`${FRONT_HOST}`)
  traefik.http.routers.front.entrypoints: websecure
  traefik.http.routers.front.tls: "true"
  traefik.http.services.front.loadbalancer.server.port: "3000"

x-traefik-labels-api: &labels_api
  traefik.enable: "true"
  traefik.http.routers.api.rule: Host(`${API_HOST}`)
  traefik.http.routers.api.entrypoints: websecure
  traefik.http.routers.api.tls: "true"
  traefik.http.services.api.loadbalancer.server.port: "8080"

services:
  traefik:
    image: traefik:v3.1
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --api.dashboard=false
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik/dynamic:ro
    labels:
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{any:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-https
      - traefik.http.middlewares.redirect-https.redirectscheme.scheme=https
    restart: unless-stopped

  frontend:
    build:
      context: ../firecasting-frontend/vite-react-frontend
      args:
        VITE_API_BASE_URL: https://api.local.test/api/simulation
    labels:
      traefik.enable: "true"
      traefik.http.routers.frontend.rule: Host(`fire.local.test`)
      traefik.http.routers.frontend.entrypoints: websecure
      traefik.http.routers.frontend.tls: "true"
      traefik.http.services.frontend.loadbalancer.server.port: "3000"
    restart: unless-stopped

  api:
    build:
      context: ../firecasting-backend
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_WEB_CORS_ALLOWED_ORIGINS: https://${FRONT_HOST}
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.rule: Host(`${API_HOST}`)
      traefik.http.routers.api.entrypoints: websecure
      traefik.http.routers.api.tls: "true"
      traefik.http.services.api.loadbalancer.server.port: "8080"
    restart: unless-stopped
